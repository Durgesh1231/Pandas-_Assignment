# -*- coding: utf-8 -*-
"""Pandas  Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vF0dQawF4fbJH70mw77OOl-CEwjVplYy
"""

import pandas as pd

### ANS 1.

course_name = ['Data Science', 'Machine Learning', 'Big Data', 'Data Engineer']
duration = [2, 3, 6, 4]
df = pd.DataFrame(data={'course_name': course_name, 'duration': duration})

# To print the data in the second row
print("Q1: Data in the second row of the dataframe:")
print(df.iloc[1])  # iloc is used for integer-location based indexing


### ANS 2.

# loc: loc is label-based indexing, i.e., it is used to access a group of rows and columns by labels or a boolean array.
# iloc: iloc is integer-location based indexing, i.e., it is used to access a group of rows and columns by their integer positions.



### ANS 3.


# then find the output for both new_df.loc[2] and new_df.iloc[2].
reindex = [3, 0, 1, 2]
new_df = df.reindex(reindex)

print("\nQ3: Output of new_df.loc[2] and new_df.iloc[2]:")
print("new_df.loc[2]:")
print(new_df.loc[2])  # loc is used to access by label, here 2 refers to the index '2' in the reindexed DataFrame
print("\nnew_df.iloc[2]:")
print(new_df.iloc[2])  # iloc is used to access by position, here 2 refers to the 3rd row of the DataFrame



### ANS 4.


# (i) mean of each and every column present in the dataframe.
# (ii) standard deviation of column, ‘duration’.
# For the given df, we will rename columns to match Q4.

df1 = pd.DataFrame({
    'course_name': ['Data Science', 'Machine Learning', 'Big Data', 'Data Engineer'],
    'column_2': [2, 3, 6, 4]
})

print("\nQ4: Statistical measurements for df1:")
# (i) Mean of each column
mean_values = df1.mean()
print("Mean of each column:")
print(mean_values)

# (ii) Standard deviation of 'column_2'
std_dev_column_2 = df1['column_2'].std()
print("\nStandard deviation of column_2:")
print(std_dev_column_2)



### ANS 5.


df1.loc[1, 'column_2'] = 'StringData'  # Replace the second row value in 'column_2' by a string.

# Trying to find the mean will raise an error since the column contains non-numeric data now.
try:
    mean_column_2_after_replace = df1['column_2'].mean()
    print("\nMean of column_2 after replacement:", mean_column_2_after_replace)
except Exception as e:
    print("\nError:", e)  # Explanation for why it fails



### ANS 6.


# Windows functions in pandas are used for rolling operations such as calculating rolling averages, rolling sums, etc.
# Types of window functions include:
# - Rolling Window (e.g., df.rolling(window=3).mean())
# - Expanding Window (e.g., df.expanding().mean())
# - EWM (Exponentially Weighted Moving Window) (e.g., df.ewm(span=2).mean())


### ANS 7.


current_month_year = pd.to_datetime('today').strftime('%Y-%m')
print("\nQ7: Current Month and Year:", current_month_year)


### ANS 8.


from datetime import datetime

def calculate_date_difference():
    date_1 = input("Enter first date (YYYY-MM-DD): ")
    date_2 = input("Enter second date (YYYY-MM-DD): ")

    date_1 = pd.to_datetime(date_1)
    date_2 = pd.to_datetime(date_2)

    # Calculate the difference between the two dates
    delta = date_2 - date_1

    # Extract days, hours, and minutes from the time delta
    days = delta.days
    seconds = delta.seconds
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60

    print("\nQ8: Difference between the dates:")
    print(f"Days: {days}, Hours: {hours}, Minutes: {minutes}")

# Uncomment below to run the date difference calculation
# calculate_date_difference()



### ANS 9.

import pandas as pd

def convert_column_to_category():
    # Prompt the user to input the file path, column name, and category order
    file_path = input("Enter the file path of the CSV file: ")
    column_name = input("Enter the column name to convert to categorical: ")
    category_order = input("Enter the desired category order (comma separated): ").split(',')

    # Read the CSV file
    df = pd.read_csv(file_path)

    # Convert the specified column to a categorical data type with specified order
    df[column_name] = pd.Categorical(df[column_name], categories=category_order, ordered=True)

    # Display the sorted data
    sorted_df = df.sort_values(by=column_name)
    print("\nSorted Data:")
    print(sorted_df)

# Example usage
# convert_column_to_category()



### ANS 10.

import pandas as pd
import matplotlib.pyplot as plt

def visualize_sales_data():
    # Prompt the user to enter the file path
    file_path = input("Enter the file path of the sales data CSV file: ")

    # Read the CSV file
    df = pd.read_csv(file_path)

    # Assuming the CSV contains a 'Date' and product categories columns, for example:
    # Date, Product_A, Product_B, Product_C
    df['Date'] = pd.to_datetime(df['Date'])  # Convert the Date column to datetime

    # Plot a stacked bar chart
    df.set_index('Date').plot(kind='bar', stacked=True, figsize=(10, 6))

    # Adding labels and title
    plt.title('Sales Data by Product Category Over Time')
    plt.xlabel('Date')
    plt.ylabel('Sales')
    plt.xticks(rotation=45)
    plt.tight_layout()

    # Show the chart
    plt.show()

# Example usage
# visualize_sales_data()



### ANS 11.

import pandas as pd

def calculate_student_scores():
    # Prompt the user to enter the file path
    file_path = input("Enter the file path of the student scores CSV file: ")

    # Read the CSV file
    df = pd.read_csv(file_path)

    # Assuming the CSV contains 'Student_ID' and 'Test_Score' columns
    mean_score = df['Test_Score'].mean()
    median_score = df['Test_Score'].median()
    mode_score = df['Test_Score'].mode()[0]  # mode() returns a Series, we take the first value

    # Display the results in a table
    results = pd.DataFrame({
        'Measure': ['Mean', 'Median', 'Mode'],
        'Score': [mean_score, median_score, mode_score]
    })

    print("\nStatistical Measures of Test Scores:")
    print(results)

# Example usage
# calculate_student_scores()